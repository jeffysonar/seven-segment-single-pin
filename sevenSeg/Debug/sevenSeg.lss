
sevenSeg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000256  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00000256  000002ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800088  00800088  00000312  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000312  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000824  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000275  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001ae  00000000  00000000  00000e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  00000ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a9  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000449  00000000  00000000  0000142d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001876  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	15 c0       	rjmp	.+42     	; 0x2c <__ctors_end>
   2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
   4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
   6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
   8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
   a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
   c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
   e:	32 c0       	rjmp	.+100    	; 0x74 <__vector_7>
  10:	30 c0       	rjmp	.+96     	; 0x72 <__bad_interrupt>
  12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
  14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
  16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
  18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
  1a:	2b c0       	rjmp	.+86     	; 0x72 <__bad_interrupt>
  1c:	2a c0       	rjmp	.+84     	; 0x72 <__bad_interrupt>
  1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
  20:	28 c0       	rjmp	.+80     	; 0x72 <__bad_interrupt>
  22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
  24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>
  26:	25 c0       	rjmp	.+74     	; 0x72 <__bad_interrupt>
  28:	24 c0       	rjmp	.+72     	; 0x72 <__bad_interrupt>

0000002a <__ctors_start>:
  2a:	17 01       	movw	r2, r14

0000002c <__ctors_end>:
  2c:	11 24       	eor	r1, r1
  2e:	1f be       	out	0x3f, r1	; 63
  30:	cf ed       	ldi	r28, 0xDF	; 223
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	10 e0       	ldi	r17, 0x00	; 0
  36:	a0 e6       	ldi	r26, 0x60	; 96
  38:	b0 e0       	ldi	r27, 0x00	; 0
  3a:	e6 e5       	ldi	r30, 0x56	; 86
  3c:	f2 e0       	ldi	r31, 0x02	; 2
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	a8 38       	cpi	r26, 0x88	; 136
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	20 e0       	ldi	r18, 0x00	; 0
  4c:	a8 e8       	ldi	r26, 0x88	; 136
  4e:	b0 e0       	ldi	r27, 0x00	; 0
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	a3 39       	cpi	r26, 0x93	; 147
  56:	b2 07       	cpc	r27, r18
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>

0000005a <__do_global_ctors>:
  5a:	10 e0       	ldi	r17, 0x00	; 0
  5c:	c6 e1       	ldi	r28, 0x16	; 22
  5e:	d0 e0       	ldi	r29, 0x00	; 0
  60:	03 c0       	rjmp	.+6      	; 0x68 <__do_global_ctors+0xe>
  62:	21 97       	sbiw	r28, 0x01	; 1
  64:	fe 01       	movw	r30, r28
  66:	ef d0       	rcall	.+478    	; 0x246 <__tablejump2__>
  68:	c5 31       	cpi	r28, 0x15	; 21
  6a:	d1 07       	cpc	r29, r17
  6c:	d1 f7       	brne	.-12     	; 0x62 <__do_global_ctors+0x8>
  6e:	b3 d0       	rcall	.+358    	; 0x1d6 <main>
  70:	f0 c0       	rjmp	.+480    	; 0x252 <_exit>

00000072 <__bad_interrupt>:
  72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <__vector_7>:

uint8_t recvd[2];
uint8_t point = 0;

ISR(USART_RX_vect)	
{
  74:	1f 92       	push	r1
  76:	0f 92       	push	r0
  78:	0f b6       	in	r0, 0x3f	; 63
  7a:	0f 92       	push	r0
  7c:	11 24       	eor	r1, r1
  7e:	2f 93       	push	r18
  80:	3f 93       	push	r19
  82:	4f 93       	push	r20
  84:	5f 93       	push	r21
  86:	6f 93       	push	r22
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
  8c:	af 93       	push	r26
  8e:	bf 93       	push	r27
  90:	ef 93       	push	r30
  92:	ff 93       	push	r31
	recvd[point++] = serial.receive();
  94:	e0 91 88 00 	lds	r30, 0x0088
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	8e 0f       	add	r24, r30
  9c:	80 93 88 00 	sts	0x0088, r24
		}
		
		uint8_t receive()
		{
			//while(! (UCSRA) & (1 << RXC));					//no longer polling
			return UDR;											//return received content
  a0:	9c b1       	in	r25, 0x0c	; 12
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	e7 57       	subi	r30, 0x77	; 119
  a6:	ff 4f       	sbci	r31, 0xFF	; 255
  a8:	90 83       	st	Z, r25
	if(point >= 2)
  aa:	82 30       	cpi	r24, 0x02	; 2
  ac:	08 f4       	brcc	.+2      	; 0xb0 <__vector_7+0x3c>
  ae:	83 c0       	rjmp	.+262    	; 0x1b6 <__stack+0xd7>
	void execute(uint8_t recvd[2])
	{
		//uint8_t cmd = recvd[0] & 0x0F;	//filter 4 MSB bits of command
		//uint8_t data = recvd[1];			//data
		//cmdCall(cmd, data);				//call command
		cmdCall((recvd[0] & 0x0F), recvd[1]);	//shortcut for above steps
  b0:	e9 e8       	ldi	r30, 0x89	; 137
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	a1 81       	ldd	r26, Z+1	; 0x01
  b6:	e0 81       	ld	r30, Z
  b8:	ef 70       	andi	r30, 0x0F	; 15
	uint8_t sevSeg[SEG_NUM] = {0, 0, 0, 0};
	uint8_t gpin[SEG_NUM] = {1, 1, 1, 1};
	public:
	void cmdCall(uint8_t cmd, uint8_t data)
	{
		switch(cmd)
  ba:	e8 30       	cpi	r30, 0x08	; 8
  bc:	19 f1       	breq	.+70     	; 0x104 <__stack+0x25>
  be:	38 f0       	brcs	.+14     	; 0xce <__vector_7+0x5a>
  c0:	e9 30       	cpi	r30, 0x09	; 9
  c2:	09 f4       	brne	.+2      	; 0xc6 <__vector_7+0x52>
  c4:	4b c0       	rjmp	.+150    	; 0x15c <__stack+0x7d>
  c6:	ea 30       	cpi	r30, 0x0A	; 10
  c8:	09 f4       	brne	.+2      	; 0xcc <__vector_7+0x58>
  ca:	53 c0       	rjmp	.+166    	; 0x172 <__stack+0x93>
  cc:	72 c0       	rjmp	.+228    	; 0x1b2 <__stack+0xd3>
		}
	}
	
	void updateBit(uint8_t place, uint8_t value) // X(0:7) xxxxxxxx
	{
		if(place >= SEG_NUM)		//7 segment digit doesn't exist
  ce:	e4 30       	cpi	r30, 0x04	; 4
  d0:	08 f0       	brcs	.+2      	; 0xd4 <__vector_7+0x60>
  d2:	6f c0       	rjmp	.+222    	; 0x1b2 <__stack+0xd3>
		{
			return;
		}
		if(value > 15)	// non - numeric value, it's alphabet
  d4:	a0 31       	cpi	r26, 0x10	; 16
  d6:	68 f0       	brcs	.+26     	; 0xf2 <__stack+0x13>
		{
			if((value > 64) && (value < 91))		//A-Z - (65:90) - 65 + 10
  d8:	8f eb       	ldi	r24, 0xBF	; 191
  da:	8a 0f       	add	r24, r26
  dc:	8a 31       	cpi	r24, 0x1A	; 26
  de:	10 f4       	brcc	.+4      	; 0xe4 <__stack+0x5>
			{
				value -= 55;
  e0:	a7 53       	subi	r26, 0x37	; 55
  e2:	07 c0       	rjmp	.+14     	; 0xf2 <__stack+0x13>
			}
			else if((value > 96) && (value < 123))	//a-z - (97:122) - 97 + 10
  e4:	8f e9       	ldi	r24, 0x9F	; 159
  e6:	8a 0f       	add	r24, r26
  e8:	8a 31       	cpi	r24, 0x1A	; 26
  ea:	10 f4       	brcc	.+4      	; 0xf0 <__stack+0x11>
			{
				value -= 87;
  ec:	a7 55       	subi	r26, 0x57	; 87
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <__stack+0x13>
			}
			else     // garbage - make it zero
			{
				value = 0;
  f0:	a0 e0       	ldi	r26, 0x00	; 0
			}
		}
		sevSeg[place] = codes[value];
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	e5 57       	subi	r30, 0x75	; 117
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	ac 59       	subi	r26, 0x9C	; 156
  fc:	bf 4f       	sbci	r27, 0xFF	; 255
  fe:	8c 91       	ld	r24, X
 100:	80 83       	st	Z, r24
 102:	57 c0       	rjmp	.+174    	; 0x1b2 <__stack+0xd3>
	}
	
	void partialSwitch(uint8_t pattern)	//X8 xxxxxxxx
	{
		if(pattern == 0xFF)
 104:	af 3f       	cpi	r26, 0xFF	; 255
 106:	41 f4       	brne	.+16     	; 0x118 <__stack+0x39>
		{
			r = 1;
		}
		for(uint8_t i = 0; i < SEG_NUM; i ++)
		{
			gpin[i] = r;
 108:	eb e8       	ldi	r30, 0x8B	; 139
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	84 83       	std	Z+4, r24	; 0x04
 110:	85 83       	std	Z+5, r24	; 0x05
 112:	86 83       	std	Z+6, r24	; 0x06
 114:	87 83       	std	Z+7, r24	; 0x07
 116:	4d c0       	rjmp	.+154    	; 0x1b2 <__stack+0xd3>
		if(pattern == 0xFF)
		{
			switchnf(0xFF);
			return;
		}
		if(pattern == 0x00)
 118:	a1 11       	cpse	r26, r1
 11a:	07 c0       	rjmp	.+14     	; 0x12a <__stack+0x4b>
		{
			r = 1;
		}
		for(uint8_t i = 0; i < SEG_NUM; i ++)
		{
			gpin[i] = r;
 11c:	eb e8       	ldi	r30, 0x8B	; 139
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	14 82       	std	Z+4, r1	; 0x04
 122:	15 82       	std	Z+5, r1	; 0x05
 124:	16 82       	std	Z+6, r1	; 0x06
 126:	17 82       	std	Z+7, r1	; 0x07
 128:	44 c0       	rjmp	.+136    	; 0x1b2 <__stack+0xd3>
 12a:	ef e8       	ldi	r30, 0x8F	; 143
 12c:	f0 e0       	ldi	r31, 0x00	; 0
		if(pattern == 0xFF)
		{
			switchnf(0xFF);
			return;
		}
		if(pattern == 0x00)
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
			return;
		}
		for(uint8_t i = 0; i < SEG_NUM; i ++)
		{
			//uint8_t op = (1 << i);
			uint8_t r = pattern & (1 << i);
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	50 e0       	ldi	r21, 0x00	; 0
			{
				gpin[i] = 0;
			}
			else
			{
				gpin[i] = 1;
 136:	61 e0       	ldi	r22, 0x01	; 1
			return;
		}
		for(uint8_t i = 0; i < SEG_NUM; i ++)
		{
			//uint8_t op = (1 << i);
			uint8_t r = pattern & (1 << i);
 138:	9a 01       	movw	r18, r20
 13a:	08 2e       	mov	r0, r24
 13c:	02 c0       	rjmp	.+4      	; 0x142 <__stack+0x63>
 13e:	22 0f       	add	r18, r18
 140:	33 1f       	adc	r19, r19
 142:	0a 94       	dec	r0
 144:	e2 f7       	brpl	.-8      	; 0x13e <__stack+0x5f>
 146:	2a 23       	and	r18, r26
			if(r == 0)
 148:	11 f4       	brne	.+4      	; 0x14e <__stack+0x6f>
			{
				gpin[i] = 0;
 14a:	10 82       	st	Z, r1
 14c:	01 c0       	rjmp	.+2      	; 0x150 <__stack+0x71>
			}
			else
			{
				gpin[i] = 1;
 14e:	60 83       	st	Z, r22
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	31 96       	adiw	r30, 0x01	; 1
		if(pattern == 0x00)
		{
			switchnf(0x00);
			return;
		}
		for(uint8_t i = 0; i < SEG_NUM; i ++)
 154:	84 30       	cpi	r24, 0x04	; 4
 156:	91 05       	cpc	r25, r1
 158:	79 f7       	brne	.-34     	; 0x138 <__stack+0x59>
 15a:	2b c0       	rjmp	.+86     	; 0x1b2 <__stack+0xd3>
	}

	void switchnf(uint8_t d)	//X9 dddddddd
	{
		uint8_t r;
		if(d == 0)
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	a1 11       	cpse	r26, r1
 160:	01 c0       	rjmp	.+2      	; 0x164 <__stack+0x85>
 162:	80 e0       	ldi	r24, 0x00	; 0
		{
			r = 1;
		}
		for(uint8_t i = 0; i < SEG_NUM; i ++)
		{
			gpin[i] = r;
 164:	eb e8       	ldi	r30, 0x8B	; 139
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	84 83       	std	Z+4, r24	; 0x04
 16a:	85 83       	std	Z+5, r24	; 0x05
 16c:	86 83       	std	Z+6, r24	; 0x06
 16e:	87 83       	std	Z+7, r24	; 0x07
 170:	20 c0       	rjmp	.+64     	; 0x1b2 <__stack+0xd3>
		}
	}
	
	void clearout(uint8_t pattern)
	{
		if(pattern == 0xFF)
 172:	af 3f       	cpi	r26, 0xFF	; 255
 174:	41 f4       	brne	.+16     	; 0x186 <__stack+0xa7>
		{
			for(uint8_t i = 0; i < SEG_NUM; i ++)
			{
				gpin[i] = 1;
 176:	eb e8       	ldi	r30, 0x8B	; 139
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	84 83       	std	Z+4, r24	; 0x04
 17e:	85 83       	std	Z+5, r24	; 0x05
 180:	86 83       	std	Z+6, r24	; 0x06
 182:	87 83       	std	Z+7, r24	; 0x07
 184:	16 c0       	rjmp	.+44     	; 0x1b2 <__stack+0xd3>
		}
	}
	
	void clearout(uint8_t pattern)
	{
		if(pattern == 0xFF)
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
			}
			return;
		}
		for(uint8_t i = 0;i < SEG_NUM; i ++)
		{
			uint8_t r = pattern & (1 << i);
 18a:	41 e0       	ldi	r20, 0x01	; 1
 18c:	50 e0       	ldi	r21, 0x00	; 0
			if(r != 0)
			{
				sevSeg[i] = S_0;
 18e:	6b ef       	ldi	r22, 0xFB	; 251
			}
			return;
		}
		for(uint8_t i = 0;i < SEG_NUM; i ++)
		{
			uint8_t r = pattern & (1 << i);
 190:	9a 01       	movw	r18, r20
 192:	08 2e       	mov	r0, r24
 194:	02 c0       	rjmp	.+4      	; 0x19a <__stack+0xbb>
 196:	22 0f       	add	r18, r18
 198:	33 1f       	adc	r19, r19
 19a:	0a 94       	dec	r0
 19c:	e2 f7       	brpl	.-8      	; 0x196 <__stack+0xb7>
 19e:	2a 23       	and	r18, r26
			if(r != 0)
 1a0:	21 f0       	breq	.+8      	; 0x1aa <__stack+0xcb>
 1a2:	fc 01       	movw	r30, r24
 1a4:	e5 57       	subi	r30, 0x75	; 117
 1a6:	ff 4f       	sbci	r31, 0xFF	; 255
			{
				sevSeg[i] = S_0;
 1a8:	60 83       	st	Z, r22
 1aa:	01 96       	adiw	r24, 0x01	; 1
			{
				gpin[i] = 1;
			}
			return;
		}
		for(uint8_t i = 0;i < SEG_NUM; i ++)
 1ac:	84 30       	cpi	r24, 0x04	; 4
 1ae:	91 05       	cpc	r25, r1
 1b0:	79 f7       	brne	.-34     	; 0x190 <__stack+0xb1>
	{
		ss.execute(recvd);
		point = 0;
 1b2:	10 92 88 00 	sts	0x0088, r1
	}
}
 1b6:	ff 91       	pop	r31
 1b8:	ef 91       	pop	r30
 1ba:	bf 91       	pop	r27
 1bc:	af 91       	pop	r26
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	6f 91       	pop	r22
 1c4:	5f 91       	pop	r21
 1c6:	4f 91       	pop	r20
 1c8:	3f 91       	pop	r19
 1ca:	2f 91       	pop	r18
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <main>:
class UART
{
	public:
		void init()
		{
			UCSRB = (1 << RXEN) | (1 << RXCIE);					//enable receive, and receive interrupt
 1d6:	80 e9       	ldi	r24, 0x90	; 144
 1d8:	8a b9       	out	0x0a, r24	; 10
			UCSRC = (1 << 7) | (1<<UCSZ1) | (1 << UCSZ0);		//7 is for URSEL
 1da:	86 e8       	ldi	r24, 0x86	; 134
 1dc:	83 b9       	out	0x03, r24	; 3
																//8 bit data, no parity, 1 stop bit
			UBRRL = BAUD_NUM;									//U2X is set to 0
 1de:	86 e7       	ldi	r24, 0x76	; 118
 1e0:	89 b9       	out	0x09, r24	; 9
			sei();												//enable interrupt globally
 1e2:	78 94       	sei

int main(void)
{
	serial.init();
	DDRB = 0xFF;
 1e4:	8f ef       	ldi	r24, 0xFF	; 255
 1e6:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;
 1e8:	81 bb       	out	0x11, r24	; 17
			else     // garbage - make it zero
			{
				value = 0;
			}
		}
		sevSeg[place] = codes[value];
 1ea:	8f ea       	ldi	r24, 0xAF	; 175
 1ec:	80 93 8b 00 	sts	0x008B, r24
 1f0:	6b e8       	ldi	r22, 0x8B	; 139
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	2f e8       	ldi	r18, 0x8F	; 143
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	40 e6       	ldi	r20, 0x60	; 96
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	fb 01       	movw	r30, r22
 1fe:	e9 01       	movw	r28, r18
 200:	da 01       	movw	r26, r20
	
	void display()
	{
		for(int i = 0;i < SEG_NUM;i ++)
		{
			PORTB = sevSeg[i];
 202:	81 91       	ld	r24, Z+
 204:	88 bb       	out	0x18, r24	; 24
			PORTD = ~(gpin[i] << gnd[i]);
 206:	89 91       	ld	r24, Y+
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0d 90       	ld	r0, X+
 20c:	02 c0       	rjmp	.+4      	; 0x212 <main+0x3c>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	0a 94       	dec	r0
 214:	e2 f7       	brpl	.-8      	; 0x20e <main+0x38>
 216:	80 95       	com	r24
 218:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	87 ea       	ldi	r24, 0xA7	; 167
 21c:	91 e6       	ldi	r25, 0x61	; 97
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <main+0x48>
 222:	00 c0       	rjmp	.+0      	; 0x224 <main+0x4e>
 224:	00 00       	nop
		}
	}
	
	void display()
	{
		for(int i = 0;i < SEG_NUM;i ++)
 226:	e2 17       	cp	r30, r18
 228:	f3 07       	cpc	r31, r19
 22a:	59 f7       	brne	.-42     	; 0x202 <main+0x2c>
 22c:	e7 cf       	rjmp	.-50     	; 0x1fc <main+0x26>

0000022e <_GLOBAL__sub_I_ss>:
const uint8_t codes[36] = {S_0, S_1, S_2, S_3, S_4, S_5, S_6, S_7, S_8, S_9, S_A, S_B, S_C, S_D, S_E, S_F, S_G, S_H, S_I, S_J, S_K, S_L, S_M, S_N, S_O, S_P, S_Q, S_R, S_S, S_T, S_U, S_V, S_W, S_X, S_Y, S_Z};

const uint8_t gnd[SEG_NUM] = {E_1, E_2, E_3, E_4};


class SevenSeg
 22e:	eb e8       	ldi	r30, 0x8B	; 139
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	10 82       	st	Z, r1
 234:	11 82       	std	Z+1, r1	; 0x01
 236:	12 82       	std	Z+2, r1	; 0x02
 238:	13 82       	std	Z+3, r1	; 0x03
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	84 83       	std	Z+4, r24	; 0x04
 23e:	85 83       	std	Z+5, r24	; 0x05
 240:	86 83       	std	Z+6, r24	; 0x06
 242:	87 83       	std	Z+7, r24	; 0x07
 244:	08 95       	ret

00000246 <__tablejump2__>:
 246:	ee 0f       	add	r30, r30
 248:	ff 1f       	adc	r31, r31
 24a:	05 90       	lpm	r0, Z+
 24c:	f4 91       	lpm	r31, Z
 24e:	e0 2d       	mov	r30, r0
 250:	09 94       	ijmp

00000252 <_exit>:
 252:	f8 94       	cli

00000254 <__stop_program>:
 254:	ff cf       	rjmp	.-2      	; 0x254 <__stop_program>
