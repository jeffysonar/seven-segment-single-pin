
sevenSeg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000170  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000170  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000069f  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000022c  00000000  00000000  00000917  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000156  00000000  00000000  00000b43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f8  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012b  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000010f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>
  26:	12 c0       	rjmp	.+36     	; 0x4c <__bad_interrupt>
  28:	11 c0       	rjmp	.+34     	; 0x4c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 e7       	ldi	r30, 0x70	; 112
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 36       	cpi	r26, 0x64	; 100
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>
  48:	02 d0       	rcall	.+4      	; 0x4e <main>
  4a:	90 c0       	rjmp	.+288    	; 0x16c <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <main>:
	#include <avr/io.h>
#endif

#include "SevenSeg.h"
int main(void)
{
  4e:	cf 93       	push	r28
  50:	df 93       	push	r29
  52:	cd b7       	in	r28, 0x3d	; 61
  54:	dd 27       	eor	r29, r29
  56:	c8 50       	subi	r28, 0x08	; 8
  58:	cd bf       	out	0x3d, r28	; 61
const uint8_t codes[36] = {S_0, S_1, S_2, S_3, S_4, S_5, S_6, S_7, S_8, S_9, S_A, S_B, S_C, S_D, S_E, S_F, S_G, S_H, S_I, S_J, S_K, S_L, S_M, S_N, S_O, S_P, S_Q, S_R, S_S, S_T, S_U, S_V, S_W, S_X, S_Y, S_Z};

const uint8_t gnd[SEG_NUM] = {E_1, E_2, E_3, E_4};


class SevenSeg
  5a:	81 e0       	ldi	r24, 0x01	; 1
  5c:	8d 83       	std	Y+5, r24	; 0x05
  5e:	8e 83       	std	Y+6, r24	; 0x06
  60:	8f 83       	std	Y+7, r24	; 0x07
  62:	88 87       	std	Y+8, r24	; 0x08
	SevenSeg ss;
	DDRB = 0xFF;
  64:	8f ef       	ldi	r24, 0xFF	; 255
  66:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;
  68:	81 bb       	out	0x11, r24	; 17
			else     // garbage - make it zero
			{
				value = 0;
			}
		}
		sevSeg[place] = codes[value];
  6a:	8f ea       	ldi	r24, 0xAF	; 175
  6c:	89 83       	std	Y+1, r24	; 0x01
  6e:	8f ee       	ldi	r24, 0xEF	; 239
  70:	8a 83       	std	Y+2, r24	; 0x02
  72:	89 ec       	ldi	r24, 0xC9	; 201
  74:	8b 83       	std	Y+3, r24	; 0x03
  76:	8b ee       	ldi	r24, 0xEB	; 235
  78:	8c 83       	std	Y+4, r24	; 0x04
  7a:	ae 01       	movw	r20, r28
  7c:	4b 5f       	subi	r20, 0xFB	; 251
  7e:	5f 4f       	sbci	r21, 0xFF	; 255
  80:	fa 01       	movw	r30, r20
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	90 e0       	ldi	r25, 0x00	; 0
			return;
		}
		for(uint8_t i = 0; i < SEG_NUM; i ++)
		{
			//uint8_t op = (1 << i);
			uint8_t r = pattern & (1 << i);
  86:	a1 e0       	ldi	r26, 0x01	; 1
  88:	b0 e0       	ldi	r27, 0x00	; 0
			{
				gpin[i] = 0;
			}
			else
			{
				gpin[i] = 1;
  8a:	61 e0       	ldi	r22, 0x01	; 1
			return;
		}
		for(uint8_t i = 0; i < SEG_NUM; i ++)
		{
			//uint8_t op = (1 << i);
			uint8_t r = pattern & (1 << i);
  8c:	9d 01       	movw	r18, r26
  8e:	08 2e       	mov	r0, r24
  90:	02 c0       	rjmp	.+4      	; 0x96 <main+0x48>
  92:	22 0f       	add	r18, r18
  94:	33 1f       	adc	r19, r19
  96:	0a 94       	dec	r0
  98:	e2 f7       	brpl	.-8      	; 0x92 <main+0x44>
  9a:	25 70       	andi	r18, 0x05	; 5
			if(r == 0)
  9c:	11 f4       	brne	.+4      	; 0xa2 <main+0x54>
			{
				gpin[i] = 0;
  9e:	10 82       	st	Z, r1
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <main+0x56>
			}
			else
			{
				gpin[i] = 1;
  a2:	60 83       	st	Z, r22
  a4:	01 96       	adiw	r24, 0x01	; 1
  a6:	31 96       	adiw	r30, 0x01	; 1
		if(pattern == 0x00)
		{
			switchnf(0x00);
			return;
		}
		for(uint8_t i = 0; i < SEG_NUM; i ++)
  a8:	84 30       	cpi	r24, 0x04	; 4
  aa:	91 05       	cpc	r25, r1
  ac:	79 f7       	brne	.-34     	; 0x8c <main+0x3e>
  ae:	d1 2c       	mov	r13, r1
  b0:	0f 2e       	mov	r0, r31
  b2:	f0 e6       	ldi	r31, 0x60	; 96
  b4:	ef 2e       	mov	r14, r31
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	ff 2e       	mov	r15, r31
  ba:	f0 2d       	mov	r31, r0
  bc:	9e 01       	movw	r18, r28
  be:	2b 5f       	subi	r18, 0xFB	; 251
  c0:	3f 4f       	sbci	r19, 0xFF	; 255
  c2:	b4 2e       	mov	r11, r20
  c4:	c5 2e       	mov	r12, r21
	ss.cmdCall(8, 0x05);
    while (1) 
    {
	    ss.display();
		temp_d ++;
		if((temp_d % 1000) == 0)
  c6:	08 ee       	ldi	r16, 0xE8	; 232
  c8:	13 e0       	ldi	r17, 0x03	; 3
  ca:	fe 01       	movw	r30, r28
  cc:	31 96       	adiw	r30, 0x01	; 1
  ce:	a7 01       	movw	r20, r14
  d0:	6b 2d       	mov	r22, r11
  d2:	7c 2d       	mov	r23, r12
	}
	void display()
	{
		for(int i = 0;i < SEG_NUM;i++)
		{
			PORTB = sevSeg[i];
  d4:	81 91       	ld	r24, Z+
  d6:	88 bb       	out	0x18, r24	; 24
			PORTD = ~(gpin[i] << gnd[i]);
  d8:	db 01       	movw	r26, r22
  da:	8d 91       	ld	r24, X+
  dc:	bd 01       	movw	r22, r26
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	da 01       	movw	r26, r20
  e2:	0d 90       	ld	r0, X+
  e4:	02 c0       	rjmp	.+4      	; 0xea <__stack+0xb>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	0a 94       	dec	r0
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <__stack+0x7>
  ee:	ad 01       	movw	r20, r26
  f0:	80 95       	com	r24
  f2:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	87 ea       	ldi	r24, 0xA7	; 167
  f6:	91 e6       	ldi	r25, 0x61	; 97
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <__stack+0x19>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <__stack+0x1f>
  fe:	00 00       	nop
				clearout(data);
		}
	}
	void display()
	{
		for(int i = 0;i < SEG_NUM;i++)
 100:	e2 17       	cp	r30, r18
 102:	f3 07       	cpc	r31, r19
 104:	39 f7       	brne	.-50     	; 0xd4 <main+0x86>
	ss.cmdCall(3, 68);
	ss.cmdCall(8, 0x05);
    while (1) 
    {
	    ss.display();
		temp_d ++;
 106:	d3 94       	inc	r13
		if((temp_d % 1000) == 0)
 108:	8d 2d       	mov	r24, r13
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	b8 01       	movw	r22, r16
 10e:	07 d0       	rcall	.+14     	; 0x11e <__divmodhi4>
 110:	89 2b       	or	r24, r25
 112:	d9 f6       	brne	.-74     	; 0xca <main+0x7c>
		{
			r = 1;
		}
		for(uint8_t i = 0; i < SEG_NUM; i ++)
		{
			gpin[i] = r;
 114:	1d 82       	std	Y+5, r1	; 0x05
 116:	1e 82       	std	Y+6, r1	; 0x06
 118:	1f 82       	std	Y+7, r1	; 0x07
 11a:	18 86       	std	Y+8, r1	; 0x08
 11c:	d6 cf       	rjmp	.-84     	; 0xca <main+0x7c>

0000011e <__divmodhi4>:
 11e:	97 fb       	bst	r25, 7
 120:	07 2e       	mov	r0, r23
 122:	16 f4       	brtc	.+4      	; 0x128 <__divmodhi4+0xa>
 124:	00 94       	com	r0
 126:	06 d0       	rcall	.+12     	; 0x134 <__divmodhi4_neg1>
 128:	77 fd       	sbrc	r23, 7
 12a:	08 d0       	rcall	.+16     	; 0x13c <__divmodhi4_neg2>
 12c:	0b d0       	rcall	.+22     	; 0x144 <__udivmodhi4>
 12e:	07 fc       	sbrc	r0, 7
 130:	05 d0       	rcall	.+10     	; 0x13c <__divmodhi4_neg2>
 132:	3e f4       	brtc	.+14     	; 0x142 <__divmodhi4_exit>

00000134 <__divmodhi4_neg1>:
 134:	90 95       	com	r25
 136:	81 95       	neg	r24
 138:	9f 4f       	sbci	r25, 0xFF	; 255
 13a:	08 95       	ret

0000013c <__divmodhi4_neg2>:
 13c:	70 95       	com	r23
 13e:	61 95       	neg	r22
 140:	7f 4f       	sbci	r23, 0xFF	; 255

00000142 <__divmodhi4_exit>:
 142:	08 95       	ret

00000144 <__udivmodhi4>:
 144:	aa 1b       	sub	r26, r26
 146:	bb 1b       	sub	r27, r27
 148:	51 e1       	ldi	r21, 0x11	; 17
 14a:	07 c0       	rjmp	.+14     	; 0x15a <__udivmodhi4_ep>

0000014c <__udivmodhi4_loop>:
 14c:	aa 1f       	adc	r26, r26
 14e:	bb 1f       	adc	r27, r27
 150:	a6 17       	cp	r26, r22
 152:	b7 07       	cpc	r27, r23
 154:	10 f0       	brcs	.+4      	; 0x15a <__udivmodhi4_ep>
 156:	a6 1b       	sub	r26, r22
 158:	b7 0b       	sbc	r27, r23

0000015a <__udivmodhi4_ep>:
 15a:	88 1f       	adc	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	5a 95       	dec	r21
 160:	a9 f7       	brne	.-22     	; 0x14c <__udivmodhi4_loop>
 162:	80 95       	com	r24
 164:	90 95       	com	r25
 166:	bc 01       	movw	r22, r24
 168:	cd 01       	movw	r24, r26
 16a:	08 95       	ret

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
