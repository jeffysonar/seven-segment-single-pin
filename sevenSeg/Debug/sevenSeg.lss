
sevenSeg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  0000019c  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000395  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000020b  00000000  00000000  0000065d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000151  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000009bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000258  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000118  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>
  26:	12 c0       	rjmp	.+36     	; 0x4c <__bad_interrupt>
  28:	11 c0       	rjmp	.+34     	; 0x4c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e9       	ldi	r30, 0x9C	; 156
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a8 38       	cpi	r26, 0x88	; 136
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>
  48:	02 d0       	rcall	.+4      	; 0x4e <main>
  4a:	a6 c0       	rjmp	.+332    	; 0x198 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <main>:
	#include <avr/io.h>
#endif

#include "SevenSeg.h"
int main(void)
{
  4e:	cf 93       	push	r28
  50:	df 93       	push	r29
  52:	cd b7       	in	r28, 0x3d	; 61
  54:	dd 27       	eor	r29, r29
  56:	c4 50       	subi	r28, 0x04	; 4
  58:	cd bf       	out	0x3d, r28	; 61
	SevenSeg ss;
	DDRB = 0xFF;
  5a:	8f ef       	ldi	r24, 0xFF	; 255
  5c:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;
  5e:	81 bb       	out	0x11, r24	; 17
			else     // garbage - make it zero
			{
				value = 0;
			}
		}
		sevSeg[place] = codes[value];
  60:	8f ea       	ldi	r24, 0xAF	; 175
  62:	89 83       	std	Y+1, r24	; 0x01
  64:	8f ee       	ldi	r24, 0xEF	; 239
  66:	8a 83       	std	Y+2, r24	; 0x02
  68:	89 ec       	ldi	r24, 0xC9	; 201
  6a:	8b 83       	std	Y+3, r24	; 0x03
  6c:	8b ee       	ldi	r24, 0xEB	; 235
  6e:	8c 83       	std	Y+4, r24	; 0x04
    /* Replace with your application code */
	uint8_t temp_bit = 0;
	uint8_t temp_bv = 0;
	uint8_t temp_d = 0;
  70:	40 e0       	ldi	r20, 0x00	; 0
	SevenSeg ss;
	DDRB = 0xFF;
	DDRD = 0xFF;
    /* Replace with your application code */
	uint8_t temp_bit = 0;
	uint8_t temp_bv = 0;
  72:	71 2c       	mov	r7, r1
{
	SevenSeg ss;
	DDRB = 0xFF;
	DDRD = 0xFF;
    /* Replace with your application code */
	uint8_t temp_bit = 0;
  74:	61 2c       	mov	r6, r1
  76:	0f 2e       	mov	r0, r31
  78:	f0 e6       	ldi	r31, 0x60	; 96
  7a:	af 2e       	mov	r10, r31
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	bf 2e       	mov	r11, r31
  80:	f0 2d       	mov	r31, r0
  82:	7e 01       	movw	r14, r28
  84:	85 e0       	ldi	r24, 0x05	; 5
  86:	e8 0e       	add	r14, r24
  88:	f1 1c       	adc	r15, r1
	void display()
	{
		for(int i = 0;i < 4;i++)
		{
			PORTB = sevSeg[i];
			PORTD = ~ (1 << gnd[i]);
  8a:	01 e0       	ldi	r16, 0x01	; 1
  8c:	10 e0       	ldi	r17, 0x00	; 0
	ss.updateBit(3, 68);
    while (1) 
    {
	    ss.display();
		temp_d ++;
		if((temp_d % 1000) == 0)
  8e:	0f 2e       	mov	r0, r31
  90:	f8 ee       	ldi	r31, 0xE8	; 232
  92:	cf 2e       	mov	r12, r31
  94:	f3 e0       	ldi	r31, 0x03	; 3
  96:	df 2e       	mov	r13, r31
  98:	f0 2d       	mov	r31, r0
		{
			ss.updateBit((temp_bv++)%4,(temp_bit++)%123);
  9a:	0f 2e       	mov	r0, r31
  9c:	fb e7       	ldi	r31, 0x7B	; 123
  9e:	9f 2e       	mov	r9, r31
  a0:	f0 2d       	mov	r31, r0
			{
				value -= 87;
			}
			else     // garbage - make it zero
			{
				value = 0;
  a2:	81 2c       	mov	r8, r1
  a4:	fe 01       	movw	r30, r28
  a6:	31 96       	adiw	r30, 0x01	; 1
  a8:	d5 01       	movw	r26, r10
	public:
	void display()
	{
		for(int i = 0;i < 4;i++)
		{
			PORTB = sevSeg[i];
  aa:	91 91       	ld	r25, Z+
  ac:	98 bb       	out	0x18, r25	; 24
			PORTD = ~ (1 << gnd[i]);
  ae:	98 01       	movw	r18, r16
  b0:	0d 90       	ld	r0, X+
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <main+0x6a>
  b4:	22 0f       	add	r18, r18
  b6:	33 1f       	adc	r19, r19
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <main+0x66>
  bc:	20 95       	com	r18
  be:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	87 ea       	ldi	r24, 0xA7	; 167
  c2:	91 e6       	ldi	r25, 0x61	; 97
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x76>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x7c>
  ca:	00 00       	nop
{
	uint8_t sevSeg[4] = {0, 0, 0, 0};
	public:
	void display()
	{
		for(int i = 0;i < 4;i++)
  cc:	ee 15       	cp	r30, r14
  ce:	ff 05       	cpc	r31, r15
  d0:	61 f7       	brne	.-40     	; 0xaa <main+0x5c>
	ss.updateBit(2, 67);
	ss.updateBit(3, 68);
    while (1) 
    {
	    ss.display();
		temp_d ++;
  d2:	4f 5f       	subi	r20, 0xFF	; 255
		if((temp_d % 1000) == 0)
  d4:	84 2f       	mov	r24, r20
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	b6 01       	movw	r22, r12
  da:	37 d0       	rcall	.+110    	; 0x14a <__divmodhi4>
  dc:	89 2b       	or	r24, r25
  de:	11 f7       	brne	.-60     	; 0xa4 <main+0x56>
		{
			ss.updateBit((temp_bv++)%4,(temp_bit++)%123);
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	26 0d       	add	r18, r6
  e4:	86 2d       	mov	r24, r6
  e6:	69 2d       	mov	r22, r9
  e8:	24 d0       	rcall	.+72     	; 0x132 <__udivmodqi4>
  ea:	e9 2f       	mov	r30, r25
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	87 0d       	add	r24, r7
  f0:	37 2d       	mov	r19, r7
  f2:	33 70       	andi	r19, 0x03	; 3
			
		}
	}
	void updateBit(uint8_t place, uint8_t value)
	{
		if(value > 10)	// non - numeric value, it's alphabet
  f4:	9b 30       	cpi	r25, 0x0B	; 11
  f6:	78 f0       	brcs	.+30     	; 0x116 <__stack+0x37>
		{
			if((value > 64) && (value < 91))		//A-Z - (65:90) - 65 + 10
  f8:	5f eb       	ldi	r21, 0xBF	; 191
  fa:	59 0f       	add	r21, r25
  fc:	5a 31       	cpi	r21, 0x1A	; 26
  fe:	18 f4       	brcc	.+6      	; 0x106 <__stack+0x27>
			{
				value -= 55;
 100:	e9 ec       	ldi	r30, 0xC9	; 201
 102:	e9 0f       	add	r30, r25
 104:	08 c0       	rjmp	.+16     	; 0x116 <__stack+0x37>
			}
			else if((value > 96) && (value < 123))	//a-z - (97:122) - 97 + 10
 106:	5f e9       	ldi	r21, 0x9F	; 159
 108:	59 0f       	add	r21, r25
 10a:	5a 31       	cpi	r21, 0x1A	; 26
 10c:	18 f4       	brcc	.+6      	; 0x114 <__stack+0x35>
			{
				value -= 87;
 10e:	e9 ea       	ldi	r30, 0xA9	; 169
 110:	e9 0f       	add	r30, r25
 112:	01 c0       	rjmp	.+2      	; 0x116 <__stack+0x37>
			}
			else     // garbage - make it zero
			{
				value = 0;
 114:	e8 2d       	mov	r30, r8
			}
		}
		sevSeg[place] = codes[value];
 116:	a1 e0       	ldi	r26, 0x01	; 1
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	ac 0f       	add	r26, r28
 11c:	bd 1f       	adc	r27, r29
 11e:	a3 0f       	add	r26, r19
 120:	b1 1d       	adc	r27, r1
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	ec 59       	subi	r30, 0x9C	; 156
 126:	ff 4f       	sbci	r31, 0xFF	; 255
 128:	90 81       	ld	r25, Z
 12a:	9c 93       	st	X, r25
 12c:	78 2e       	mov	r7, r24
 12e:	62 2e       	mov	r6, r18
 130:	b9 cf       	rjmp	.-142    	; 0xa4 <main+0x56>

00000132 <__udivmodqi4>:
 132:	99 1b       	sub	r25, r25
 134:	79 e0       	ldi	r23, 0x09	; 9
 136:	04 c0       	rjmp	.+8      	; 0x140 <__udivmodqi4_ep>

00000138 <__udivmodqi4_loop>:
 138:	99 1f       	adc	r25, r25
 13a:	96 17       	cp	r25, r22
 13c:	08 f0       	brcs	.+2      	; 0x140 <__udivmodqi4_ep>
 13e:	96 1b       	sub	r25, r22

00000140 <__udivmodqi4_ep>:
 140:	88 1f       	adc	r24, r24
 142:	7a 95       	dec	r23
 144:	c9 f7       	brne	.-14     	; 0x138 <__udivmodqi4_loop>
 146:	80 95       	com	r24
 148:	08 95       	ret

0000014a <__divmodhi4>:
 14a:	97 fb       	bst	r25, 7
 14c:	07 2e       	mov	r0, r23
 14e:	16 f4       	brtc	.+4      	; 0x154 <__divmodhi4+0xa>
 150:	00 94       	com	r0
 152:	06 d0       	rcall	.+12     	; 0x160 <__divmodhi4_neg1>
 154:	77 fd       	sbrc	r23, 7
 156:	08 d0       	rcall	.+16     	; 0x168 <__divmodhi4_neg2>
 158:	0b d0       	rcall	.+22     	; 0x170 <__udivmodhi4>
 15a:	07 fc       	sbrc	r0, 7
 15c:	05 d0       	rcall	.+10     	; 0x168 <__divmodhi4_neg2>
 15e:	3e f4       	brtc	.+14     	; 0x16e <__divmodhi4_exit>

00000160 <__divmodhi4_neg1>:
 160:	90 95       	com	r25
 162:	81 95       	neg	r24
 164:	9f 4f       	sbci	r25, 0xFF	; 255
 166:	08 95       	ret

00000168 <__divmodhi4_neg2>:
 168:	70 95       	com	r23
 16a:	61 95       	neg	r22
 16c:	7f 4f       	sbci	r23, 0xFF	; 255

0000016e <__divmodhi4_exit>:
 16e:	08 95       	ret

00000170 <__udivmodhi4>:
 170:	aa 1b       	sub	r26, r26
 172:	bb 1b       	sub	r27, r27
 174:	51 e1       	ldi	r21, 0x11	; 17
 176:	07 c0       	rjmp	.+14     	; 0x186 <__udivmodhi4_ep>

00000178 <__udivmodhi4_loop>:
 178:	aa 1f       	adc	r26, r26
 17a:	bb 1f       	adc	r27, r27
 17c:	a6 17       	cp	r26, r22
 17e:	b7 07       	cpc	r27, r23
 180:	10 f0       	brcs	.+4      	; 0x186 <__udivmodhi4_ep>
 182:	a6 1b       	sub	r26, r22
 184:	b7 0b       	sbc	r27, r23

00000186 <__udivmodhi4_ep>:
 186:	88 1f       	adc	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	5a 95       	dec	r21
 18c:	a9 f7       	brne	.-22     	; 0x178 <__udivmodhi4_loop>
 18e:	80 95       	com	r24
 190:	90 95       	com	r25
 192:	bc 01       	movw	r22, r24
 194:	cd 01       	movw	r24, r26
 196:	08 95       	ret

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
