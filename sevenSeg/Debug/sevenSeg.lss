
sevenSeg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000290  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00000290  00000324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800088  00800088  0000034c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d0f  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000699  00000000  00000000  000010fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d9  00000000  00000000  00001794  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  00001b70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000564  00000000  00000000  00001bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000056b  00000000  00000000  0000215c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000026c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	15 c0       	rjmp	.+42     	; 0x2c <__ctors_end>
   2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
   4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
   6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
   8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
   a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
   c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
   e:	32 c0       	rjmp	.+100    	; 0x74 <__vector_7>
  10:	30 c0       	rjmp	.+96     	; 0x72 <__bad_interrupt>
  12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
  14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
  16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
  18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
  1a:	2b c0       	rjmp	.+86     	; 0x72 <__bad_interrupt>
  1c:	2a c0       	rjmp	.+84     	; 0x72 <__bad_interrupt>
  1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
  20:	28 c0       	rjmp	.+80     	; 0x72 <__bad_interrupt>
  22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
  24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>
  26:	25 c0       	rjmp	.+74     	; 0x72 <__bad_interrupt>
  28:	24 c0       	rjmp	.+72     	; 0x72 <__bad_interrupt>

0000002a <__ctors_start>:
  2a:	34 01       	movw	r6, r8

0000002c <__ctors_end>:
  2c:	11 24       	eor	r1, r1
  2e:	1f be       	out	0x3f, r1	; 63
  30:	cf ed       	ldi	r28, 0xDF	; 223
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	10 e0       	ldi	r17, 0x00	; 0
  36:	a0 e6       	ldi	r26, 0x60	; 96
  38:	b0 e0       	ldi	r27, 0x00	; 0
  3a:	e0 e9       	ldi	r30, 0x90	; 144
  3c:	f2 e0       	ldi	r31, 0x02	; 2
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	a8 38       	cpi	r26, 0x88	; 136
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	20 e0       	ldi	r18, 0x00	; 0
  4c:	a8 e8       	ldi	r26, 0x88	; 136
  4e:	b0 e0       	ldi	r27, 0x00	; 0
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	a2 39       	cpi	r26, 0x92	; 146
  56:	b2 07       	cpc	r27, r18
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>

0000005a <__do_global_ctors>:
  5a:	10 e0       	ldi	r17, 0x00	; 0
  5c:	c6 e1       	ldi	r28, 0x16	; 22
  5e:	d0 e0       	ldi	r29, 0x00	; 0
  60:	03 c0       	rjmp	.+6      	; 0x68 <__do_global_ctors+0xe>
  62:	21 97       	sbiw	r28, 0x01	; 1
  64:	fe 01       	movw	r30, r28
  66:	0c d1       	rcall	.+536    	; 0x280 <__tablejump2__>
  68:	c5 31       	cpi	r28, 0x15	; 21
  6a:	d1 07       	cpc	r29, r17
  6c:	d1 f7       	brne	.-12     	; 0x62 <__do_global_ctors+0x8>
  6e:	c0 d0       	rcall	.+384    	; 0x1f0 <main>
  70:	0d c1       	rjmp	.+538    	; 0x28c <_exit>

00000072 <__bad_interrupt>:
  72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <__vector_7>:
// and second element will contain data

uint8_t recvd[2];

ISR(USART_RX_vect)	
{
  74:	1f 92       	push	r1
  76:	0f 92       	push	r0
  78:	0f b6       	in	r0, 0x3f	; 63
  7a:	0f 92       	push	r0
  7c:	11 24       	eor	r1, r1
  7e:	2f 93       	push	r18
  80:	3f 93       	push	r19
  82:	4f 93       	push	r20
  84:	5f 93       	push	r21
  86:	6f 93       	push	r22
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
  8c:	af 93       	push	r26
  8e:	bf 93       	push	r27
  90:	ef 93       	push	r30
  92:	ff 93       	push	r31
		}
		
		uint8_t receive()
		{
			//while(! (UCSRA) & (1 << RXC));					//no longer polling
			return UDR;											//return received content
  94:	8c b1       	in	r24, 0x0c	; 12
	recvd[0] = serial.receive();
  96:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
	cli();								// disable interrupt globally
  9a:	f8 94       	cli
										// MCU does that on receiving interrupt, just to clear idea
	uint16_t t = 0;						// our 16-bit timer
	while((! serial.receiveComplete()) &  (t < 0xFFFF))
  9c:	5f 99       	sbic	0x0b, 7	; 11
  9e:	12 c0       	rjmp	.+36     	; 0xc4 <__vector_7+0x50>
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	31 e0       	ldi	r19, 0x01	; 1
  a6:	40 e0       	ldi	r20, 0x00	; 0
	{
		t++;							// timer running
  a8:	01 96       	adiw	r24, 0x01	; 1
{
	recvd[0] = serial.receive();
	cli();								// disable interrupt globally
										// MCU does that on receiving interrupt, just to clear idea
	uint16_t t = 0;						// our 16-bit timer
	while((! serial.receiveComplete()) &  (t < 0xFFFF))
  aa:	5f 99       	sbic	0x0b, 7	; 11
  ac:	08 c0       	rjmp	.+16     	; 0xbe <__vector_7+0x4a>
  ae:	23 2f       	mov	r18, r19
  b0:	8f 3f       	cpi	r24, 0xFF	; 255
  b2:	5f ef       	ldi	r21, 0xFF	; 255
  b4:	95 07       	cpc	r25, r21
  b6:	09 f4       	brne	.+2      	; 0xba <__vector_7+0x46>
  b8:	24 2f       	mov	r18, r20
  ba:	21 11       	cpse	r18, r1
  bc:	f5 cf       	rjmp	.-22     	; 0xa8 <__vector_7+0x34>
	{
		t++;							// timer running
	}
	if(t == 0xFFFF)						// checking timeout
  be:	01 96       	adiw	r24, 0x01	; 1
  c0:	09 f4       	brne	.+2      	; 0xc4 <__vector_7+0x50>
  c2:	86 c0       	rjmp	.+268    	; 0x1d0 <__stack+0xf1>
  c4:	ac b1       	in	r26, 0x0c	; 12
	{
		return;
	}
	recvd[1] = serial.receive();		// get data byte
  c6:	e8 e8       	ldi	r30, 0x88	; 136
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	a1 83       	std	Z+1, r26	; 0x01
	void execute(uint8_t recvd[2])
	{
		//uint8_t cmd = recvd[0] & 0x0F;	//filter 4 MSB bits of command
		//uint8_t data = recvd[1];			//data
		//cmdCall(cmd, data);				//call command
		cmdCall((recvd[0] & 0x0F), recvd[1]);	//shortcut for above steps
  cc:	e0 81       	ld	r30, Z
  ce:	ef 70       	andi	r30, 0x0F	; 15
	uint8_t sevSeg[SEG_NUM] = {0, 0, 0, 0};
	uint8_t gpin[SEG_NUM] = {1, 1, 1, 1};
	public:
	void cmdCall(uint8_t cmd, uint8_t data)
	{
		switch(cmd)
  d0:	e8 30       	cpi	r30, 0x08	; 8
  d2:	31 f1       	breq	.+76     	; 0x120 <__stack+0x41>
  d4:	38 f0       	brcs	.+14     	; 0xe4 <__stack+0x5>
  d6:	e9 30       	cpi	r30, 0x09	; 9
  d8:	09 f4       	brne	.+2      	; 0xdc <__vector_7+0x68>
  da:	4e c0       	rjmp	.+156    	; 0x178 <__stack+0x99>
  dc:	ea 30       	cpi	r30, 0x0A	; 10
  de:	09 f4       	brne	.+2      	; 0xe2 <__stack+0x3>
  e0:	56 c0       	rjmp	.+172    	; 0x18e <__stack+0xaf>
  e2:	75 c0       	rjmp	.+234    	; 0x1ce <__stack+0xef>
		}
	}
	
	void updateBit(uint8_t place, uint8_t value) // X(0:7) xxxxxxxx
	{
		if(place >= SEG_NUM)		//7 segment digit doesn't exist
  e4:	e4 30       	cpi	r30, 0x04	; 4
  e6:	08 f0       	brcs	.+2      	; 0xea <__stack+0xb>
  e8:	72 c0       	rjmp	.+228    	; 0x1ce <__stack+0xef>
		{
			return;
		}
		if(value > 15)	// non - numeric value, it's alphabet
  ea:	a0 31       	cpi	r26, 0x10	; 16
  ec:	80 f0       	brcs	.+32     	; 0x10e <__stack+0x2f>
		{
			if((value > 64) && (value < 91))		//A-Z - (65:90) - 65 + 10
  ee:	8f eb       	ldi	r24, 0xBF	; 191
  f0:	8a 0f       	add	r24, r26
  f2:	8a 31       	cpi	r24, 0x1A	; 26
  f4:	10 f4       	brcc	.+4      	; 0xfa <__stack+0x1b>
			{
				value -= 55;
  f6:	a7 53       	subi	r26, 0x37	; 55
  f8:	0a c0       	rjmp	.+20     	; 0x10e <__stack+0x2f>
			}
			else if((value > 96) && (value < 123))	//a-z - (97:122) - 97 + 10
  fa:	8f e9       	ldi	r24, 0x9F	; 159
  fc:	8a 0f       	add	r24, r26
  fe:	8a 31       	cpi	r24, 0x1A	; 26
 100:	10 f4       	brcc	.+4      	; 0x106 <__stack+0x27>
			{
				value -= 87;
 102:	a7 55       	subi	r26, 0x57	; 87
 104:	04 c0       	rjmp	.+8      	; 0x10e <__stack+0x2f>
			}
			else if((value > 47) && (value < 58))	//0 - 9 - (48:57) - 48
 106:	a0 53       	subi	r26, 0x30	; 48
 108:	aa 30       	cpi	r26, 0x0A	; 10
 10a:	08 f0       	brcs	.+2      	; 0x10e <__stack+0x2f>
			{
				value -= 48;
			}
			else     // garbage - make it zero
			{
				value = 0;
 10c:	a0 e0       	ldi	r26, 0x00	; 0
			}
		}
		sevSeg[place] = codes[value];
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	e6 57       	subi	r30, 0x76	; 118
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	ac 59       	subi	r26, 0x9C	; 156
 118:	bf 4f       	sbci	r27, 0xFF	; 255
 11a:	8c 91       	ld	r24, X
 11c:	80 83       	st	Z, r24
 11e:	57 c0       	rjmp	.+174    	; 0x1ce <__stack+0xef>
	}
	
	void partialSwitch(uint8_t pattern)	//X8 xxxxxxxx
	{
		if(pattern == 0xFF)
 120:	af 3f       	cpi	r26, 0xFF	; 255
 122:	41 f4       	brne	.+16     	; 0x134 <__stack+0x55>
		{
			r = 1;
		}
		for(uint8_t i = 0; i < SEG_NUM; i ++)
		{
			gpin[i] = r;
 124:	ea e8       	ldi	r30, 0x8A	; 138
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	84 83       	std	Z+4, r24	; 0x04
 12c:	85 83       	std	Z+5, r24	; 0x05
 12e:	86 83       	std	Z+6, r24	; 0x06
 130:	87 83       	std	Z+7, r24	; 0x07
 132:	4d c0       	rjmp	.+154    	; 0x1ce <__stack+0xef>
		if(pattern == 0xFF)
		{
			switchnf(0xFF);
			return;
		}
		if(pattern == 0x00)
 134:	a1 11       	cpse	r26, r1
 136:	07 c0       	rjmp	.+14     	; 0x146 <__stack+0x67>
		{
			r = 1;
		}
		for(uint8_t i = 0; i < SEG_NUM; i ++)
		{
			gpin[i] = r;
 138:	ea e8       	ldi	r30, 0x8A	; 138
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	14 82       	std	Z+4, r1	; 0x04
 13e:	15 82       	std	Z+5, r1	; 0x05
 140:	16 82       	std	Z+6, r1	; 0x06
 142:	17 82       	std	Z+7, r1	; 0x07
 144:	44 c0       	rjmp	.+136    	; 0x1ce <__stack+0xef>
 146:	ea e8       	ldi	r30, 0x8A	; 138
 148:	f0 e0       	ldi	r31, 0x00	; 0
		if(pattern == 0xFF)
		{
			switchnf(0xFF);
			return;
		}
		if(pattern == 0x00)
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
		}
		for(uint8_t i = 0; i < SEG_NUM; i ++)
		{
			//uint8_t op = (1 << i);
			uint8_t r = pattern & (1 << i);
			if(r == 0)
 14e:	41 e0       	ldi	r20, 0x01	; 1
 150:	50 e0       	ldi	r21, 0x00	; 0
			{
				gpin[i] = 0;
			}
			else
			{
				gpin[i] = 1;
 152:	61 e0       	ldi	r22, 0x01	; 1
		}
		for(uint8_t i = 0; i < SEG_NUM; i ++)
		{
			//uint8_t op = (1 << i);
			uint8_t r = pattern & (1 << i);
			if(r == 0)
 154:	9a 01       	movw	r18, r20
 156:	08 2e       	mov	r0, r24
 158:	02 c0       	rjmp	.+4      	; 0x15e <__stack+0x7f>
 15a:	22 0f       	add	r18, r18
 15c:	33 1f       	adc	r19, r19
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <__stack+0x7b>
 162:	2a 23       	and	r18, r26
 164:	11 f4       	brne	.+4      	; 0x16a <__stack+0x8b>
			{
				gpin[i] = 0;
 166:	14 82       	std	Z+4, r1	; 0x04
 168:	01 c0       	rjmp	.+2      	; 0x16c <__stack+0x8d>
			}
			else
			{
				gpin[i] = 1;
 16a:	64 83       	std	Z+4, r22	; 0x04
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	31 96       	adiw	r30, 0x01	; 1
		if(pattern == 0x00)
		{
			switchnf(0x00);
			return;
		}
		for(uint8_t i = 0; i < SEG_NUM; i ++)
 170:	84 30       	cpi	r24, 0x04	; 4
 172:	91 05       	cpc	r25, r1
 174:	79 f7       	brne	.-34     	; 0x154 <__stack+0x75>
 176:	2b c0       	rjmp	.+86     	; 0x1ce <__stack+0xef>
	void switchnf(uint8_t d)	//X9 dddddddd
	{
		uint8_t r;
		if(d == 0)
		{
			r = 0;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	a1 11       	cpse	r26, r1
 17c:	01 c0       	rjmp	.+2      	; 0x180 <__stack+0xa1>
 17e:	80 e0       	ldi	r24, 0x00	; 0
		{
			r = 1;
		}
		for(uint8_t i = 0; i < SEG_NUM; i ++)
		{
			gpin[i] = r;
 180:	ea e8       	ldi	r30, 0x8A	; 138
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	84 83       	std	Z+4, r24	; 0x04
 186:	85 83       	std	Z+5, r24	; 0x05
 188:	86 83       	std	Z+6, r24	; 0x06
 18a:	87 83       	std	Z+7, r24	; 0x07
 18c:	20 c0       	rjmp	.+64     	; 0x1ce <__stack+0xef>
		}
	}
	
	void clearout(uint8_t pattern)
	{
		if(pattern == 0xFF)
 18e:	af 3f       	cpi	r26, 0xFF	; 255
 190:	41 f4       	brne	.+16     	; 0x1a2 <__stack+0xc3>
		{
			for(uint8_t i = 0; i < SEG_NUM; i ++)
			{
				gpin[i] = 1;
 192:	ea e8       	ldi	r30, 0x8A	; 138
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	84 83       	std	Z+4, r24	; 0x04
 19a:	85 83       	std	Z+5, r24	; 0x05
 19c:	86 83       	std	Z+6, r24	; 0x06
 19e:	87 83       	std	Z+7, r24	; 0x07
 1a0:	16 c0       	rjmp	.+44     	; 0x1ce <__stack+0xef>
 1a2:	ea e8       	ldi	r30, 0x8A	; 138
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
		}
	}
	
	void clearout(uint8_t pattern)
	{
		if(pattern == 0xFF)
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
			return;
		}
		for(uint8_t i = 0;i < SEG_NUM; i ++)
		{
			uint8_t r = pattern & (1 << i);
			if(r != 0)
 1aa:	41 e0       	ldi	r20, 0x01	; 1
 1ac:	50 e0       	ldi	r21, 0x00	; 0
			{
				sevSeg[i] = S_0;
 1ae:	6b ef       	ldi	r22, 0xFB	; 251
			return;
		}
		for(uint8_t i = 0;i < SEG_NUM; i ++)
		{
			uint8_t r = pattern & (1 << i);
			if(r != 0)
 1b0:	9a 01       	movw	r18, r20
 1b2:	08 2e       	mov	r0, r24
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <__stack+0xdb>
 1b6:	22 0f       	add	r18, r18
 1b8:	33 1f       	adc	r19, r19
 1ba:	0a 94       	dec	r0
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <__stack+0xd7>
 1be:	2a 23       	and	r18, r26
 1c0:	09 f0       	breq	.+2      	; 0x1c4 <__stack+0xe5>
			{
				sevSeg[i] = S_0;
 1c2:	60 83       	st	Z, r22
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	31 96       	adiw	r30, 0x01	; 1
			{
				gpin[i] = 1;
			}
			return;
		}
		for(uint8_t i = 0;i < SEG_NUM; i ++)
 1c8:	84 30       	cpi	r24, 0x04	; 4
 1ca:	91 05       	cpc	r25, r1
 1cc:	89 f7       	brne	.-30     	; 0x1b0 <__stack+0xd1>
	ss.execute(recvd);					// execute cmd	``	````
	sei();								//restore (enable) interrupts
 1ce:	78 94       	sei
}
 1d0:	ff 91       	pop	r31
 1d2:	ef 91       	pop	r30
 1d4:	bf 91       	pop	r27
 1d6:	af 91       	pop	r26
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	6f 91       	pop	r22
 1de:	5f 91       	pop	r21
 1e0:	4f 91       	pop	r20
 1e2:	3f 91       	pop	r19
 1e4:	2f 91       	pop	r18
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <main>:
class UART
{
	public:
		void init()
		{
			UCSRB = (1 << RXEN) | (1 << RXCIE);					//enable receive, and receive interrupt
 1f0:	80 e9       	ldi	r24, 0x90	; 144
 1f2:	8a b9       	out	0x0a, r24	; 10
			UCSRC = (1<<UCSZ1) | (1 << UCSZ0);					//8 bit data, no parity, 1 stop bit
 1f4:	86 e0       	ldi	r24, 0x06	; 6
 1f6:	83 b9       	out	0x03, r24	; 3
			UBRRL = BAUD_NUM;									//U2X is set to 0
 1f8:	81 e8       	ldi	r24, 0x81	; 129
 1fa:	89 b9       	out	0x09, r24	; 9

int main(void)
{
	serial.init();
	sei();												//enable interrupt globally
 1fc:	78 94       	sei
	DDRB = 0xFF;
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x00;
 202:	11 ba       	out	0x11, r1	; 17
 204:	80 e6       	ldi	r24, 0x60	; 96
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	64 e6       	ldi	r22, 0x64	; 100
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	fc 01       	movw	r30, r24
	for(int i = 0; i < SEG_NUM; i ++)
	{
		DDRD |= (1 << gnd[i]);
 20e:	41 e0       	ldi	r20, 0x01	; 1
 210:	50 e0       	ldi	r21, 0x00	; 0
 212:	a1 b3       	in	r26, 0x11	; 17
 214:	9a 01       	movw	r18, r20
 216:	01 90       	ld	r0, Z+
 218:	02 c0       	rjmp	.+4      	; 0x21e <main+0x2e>
 21a:	22 0f       	add	r18, r18
 21c:	33 1f       	adc	r19, r19
 21e:	0a 94       	dec	r0
 220:	e2 f7       	brpl	.-8      	; 0x21a <main+0x2a>
 222:	2a 2b       	or	r18, r26
 224:	21 bb       	out	0x11, r18	; 17
{
	serial.init();
	sei();												//enable interrupt globally
	DDRB = 0xFF;
	DDRD = 0x00;
	for(int i = 0; i < SEG_NUM; i ++)
 226:	e6 17       	cp	r30, r22
 228:	f7 07       	cpc	r31, r23
 22a:	99 f7       	brne	.-26     	; 0x212 <main+0x22>
			else     // garbage - make it zero
			{
				value = 0;
			}
		}
		sevSeg[place] = codes[value];
 22c:	2f ea       	ldi	r18, 0xAF	; 175
 22e:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <ss>
 232:	4e e8       	ldi	r20, 0x8E	; 142
 234:	50 e0       	ldi	r21, 0x00	; 0
 236:	ea e8       	ldi	r30, 0x8A	; 138
 238:	f0 e0       	ldi	r31, 0x00	; 0
int main(void)
{
	serial.init();
	sei();												//enable interrupt globally
	DDRB = 0xFF;
	DDRD = 0x00;
 23a:	dc 01       	movw	r26, r24
	
	void display()
	{
		for(int i = 0;i < SEG_NUM;i ++)
		{
			PORTB = sevSeg[i];
 23c:	21 91       	ld	r18, Z+
 23e:	28 bb       	out	0x18, r18	; 24
			PORTD = ~(gpin[i] << gnd[i]);
 240:	23 81       	ldd	r18, Z+3	; 0x03
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	0d 90       	ld	r0, X+
 246:	02 c0       	rjmp	.+4      	; 0x24c <main+0x5c>
 248:	22 0f       	add	r18, r18
 24a:	33 1f       	adc	r19, r19
 24c:	0a 94       	dec	r0
 24e:	e2 f7       	brpl	.-8      	; 0x248 <main+0x58>
 250:	20 95       	com	r18
 252:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 254:	c7 ea       	ldi	r28, 0xA7	; 167
 256:	d1 e6       	ldi	r29, 0x61	; 97
 258:	21 97       	sbiw	r28, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <main+0x68>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x6e>
 25e:	00 00       	nop
		}
	}
	
	void display()
	{
		for(int i = 0;i < SEG_NUM;i ++)
 260:	e4 17       	cp	r30, r20
 262:	f5 07       	cpc	r31, r21
 264:	41 f3       	breq	.-48     	; 0x236 <main+0x46>
 266:	ea cf       	rjmp	.-44     	; 0x23c <main+0x4c>

00000268 <_GLOBAL__sub_I_ss>:
const uint8_t codes[36] = {S_0, S_1, S_2, S_3, S_4, S_5, S_6, S_7, S_8, S_9, S_A, S_B, S_C, S_D, S_E, S_F, S_G, S_H, S_I, S_J, S_K, S_L, S_M, S_N, S_O, S_P, S_Q, S_R, S_S, S_T, S_U, S_V, S_W, S_X, S_Y, S_Z};

const uint8_t gnd[SEG_NUM] = {E_1, E_2, E_3, E_4};


class SevenSeg
 268:	ea e8       	ldi	r30, 0x8A	; 138
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	10 82       	st	Z, r1
 26e:	11 82       	std	Z+1, r1	; 0x01
 270:	12 82       	std	Z+2, r1	; 0x02
 272:	13 82       	std	Z+3, r1	; 0x03
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	84 83       	std	Z+4, r24	; 0x04
 278:	85 83       	std	Z+5, r24	; 0x05
 27a:	86 83       	std	Z+6, r24	; 0x06
 27c:	87 83       	std	Z+7, r24	; 0x07
 27e:	08 95       	ret

00000280 <__tablejump2__>:
 280:	ee 0f       	add	r30, r30
 282:	ff 1f       	adc	r31, r31
 284:	05 90       	lpm	r0, Z+
 286:	f4 91       	lpm	r31, Z
 288:	e0 2d       	mov	r30, r0
 28a:	09 94       	ijmp

0000028c <_exit>:
 28c:	f8 94       	cli

0000028e <__stop_program>:
 28e:	ff cf       	rjmp	.-2      	; 0x28e <__stop_program>
