
sevenSeg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000013a  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004a1  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000209  00000000  00000000  000006e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000149  00000000  00000000  000008ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000a38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002cd  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fc  00000000  00000000  00000d39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00000e35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>
  26:	12 c0       	rjmp	.+36     	; 0x4c <__bad_interrupt>
  28:	11 c0       	rjmp	.+34     	; 0x4c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea e3       	ldi	r30, 0x3A	; 58
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 36       	cpi	r26, 0x64	; 100
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>
  48:	02 d0       	rcall	.+4      	; 0x4e <main>
  4a:	75 c0       	rjmp	.+234    	; 0x136 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <main>:
	#include <avr/io.h>
#endif

#include "SevenSeg.h"
int main(void)
{
  4e:	cf 93       	push	r28
  50:	df 93       	push	r29
  52:	cd b7       	in	r28, 0x3d	; 61
  54:	dd 27       	eor	r29, r29
  56:	c8 50       	subi	r28, 0x08	; 8
  58:	cd bf       	out	0x3d, r28	; 61
const uint8_t codes[36] = {S_0, S_1, S_2, S_3, S_4, S_5, S_6, S_7, S_8, S_9, S_A, S_B, S_C, S_D, S_E, S_F, S_G, S_H, S_I, S_J, S_K, S_L, S_M, S_N, S_O, S_P, S_Q, S_R, S_S, S_T, S_U, S_V, S_W, S_X, S_Y, S_Z};

const uint8_t gnd[SEG_NUM] = {E_1, E_2, E_3, E_4};


class SevenSeg
  5a:	1d 82       	std	Y+5, r1	; 0x05
  5c:	1e 82       	std	Y+6, r1	; 0x06
  5e:	1f 82       	std	Y+7, r1	; 0x07
  60:	18 86       	std	Y+8, r1	; 0x08
	SevenSeg ss;
	DDRB = 0xFF;
  62:	8f ef       	ldi	r24, 0xFF	; 255
  64:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;
  66:	81 bb       	out	0x11, r24	; 17
			else     // garbage - make it zero
			{
				value = 0;
			}
		}
		sevSeg[place] = codes[value];
  68:	8f ea       	ldi	r24, 0xAF	; 175
  6a:	89 83       	std	Y+1, r24	; 0x01
  6c:	8f ee       	ldi	r24, 0xEF	; 239
  6e:	8a 83       	std	Y+2, r24	; 0x02
  70:	89 ec       	ldi	r24, 0xC9	; 201
  72:	8b 83       	std	Y+3, r24	; 0x03
  74:	8b ee       	ldi	r24, 0xEB	; 235
  76:	8c 83       	std	Y+4, r24	; 0x04
    /* Replace with your application code */
	uint8_t temp_bit = 0;
	uint8_t temp_bv = 0;
	uint8_t temp_d = 0;
  78:	d1 2c       	mov	r13, r1
  7a:	5e 01       	movw	r10, r28
  7c:	85 e0       	ldi	r24, 0x05	; 5
  7e:	a8 0e       	add	r10, r24
  80:	b1 1c       	adc	r11, r1
  82:	0f 2e       	mov	r0, r31
  84:	f0 e6       	ldi	r31, 0x60	; 96
  86:	ef 2e       	mov	r14, r31
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	ff 2e       	mov	r15, r31
  8c:	f0 2d       	mov	r31, r0
  8e:	95 01       	movw	r18, r10
	ss.updateBit(3, 68);
    while (1) 
    {
	    ss.display();
		temp_d ++;
		if((temp_d % 1000) == 0)
  90:	08 ee       	ldi	r16, 0xE8	; 232
  92:	13 e0       	ldi	r17, 0x03	; 3
		for(uint8_t i = 0;i < SEG_NUM; i ++)
		{
			uint8_t r = pattern & (1 << i);
			if(r != 0)
			{
				sevSeg[i] = S_0;
  94:	0f 2e       	mov	r0, r31
  96:	fb ef       	ldi	r31, 0xFB	; 251
  98:	cf 2e       	mov	r12, r31
  9a:	f0 2d       	mov	r31, r0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	b5 01       	movw	r22, r10
  a2:	a7 01       	movw	r20, r14
	public:
	void display()
	{
		for(int i = 0;i < SEG_NUM;i++)
		{
			PORTB = sevSeg[i];
  a4:	8d 91       	ld	r24, X+
  a6:	88 bb       	out	0x18, r24	; 24
			PORTD = (gpin[i] << gnd[i]);
  a8:	fb 01       	movw	r30, r22
  aa:	81 91       	ld	r24, Z+
  ac:	bf 01       	movw	r22, r30
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	fa 01       	movw	r30, r20
  b2:	01 90       	ld	r0, Z+
  b4:	02 c0       	rjmp	.+4      	; 0xba <main+0x6c>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <main+0x68>
  be:	af 01       	movw	r20, r30
  c0:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	87 ea       	ldi	r24, 0xA7	; 167
  c4:	91 e6       	ldi	r25, 0x61	; 97
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <main+0x78>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x7e>
  cc:	00 00       	nop
	uint8_t sevSeg[SEG_NUM] = {0, 0, 0, 0};
	uint8_t gpin[SEG_NUM] = {0, 0, 0, 0};
	public:
	void display()
	{
		for(int i = 0;i < SEG_NUM;i++)
  ce:	a2 17       	cp	r26, r18
  d0:	b3 07       	cpc	r27, r19
  d2:	41 f7       	brne	.-48     	; 0xa4 <main+0x56>
	ss.updateBit(2, 67);
	ss.updateBit(3, 68);
    while (1) 
    {
	    ss.display();
		temp_d ++;
  d4:	d3 94       	inc	r13
		if((temp_d % 1000) == 0)
  d6:	8d 2d       	mov	r24, r13
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	b8 01       	movw	r22, r16
  dc:	05 d0       	rcall	.+10     	; 0xe8 <__divmodhi4>
  de:	89 2b       	or	r24, r25
  e0:	e9 f6       	brne	.-70     	; 0x9c <main+0x4e>
		for(uint8_t i = 0;i < SEG_NUM; i ++)
		{
			uint8_t r = pattern & (1 << i);
			if(r != 0)
			{
				sevSeg[i] = S_0;
  e2:	ca 82       	std	Y+2, r12	; 0x02
  e4:	cc 82       	std	Y+4, r12	; 0x04
  e6:	da cf       	rjmp	.-76     	; 0x9c <main+0x4e>

000000e8 <__divmodhi4>:
  e8:	97 fb       	bst	r25, 7
  ea:	07 2e       	mov	r0, r23
  ec:	16 f4       	brtc	.+4      	; 0xf2 <__divmodhi4+0xa>
  ee:	00 94       	com	r0
  f0:	06 d0       	rcall	.+12     	; 0xfe <__divmodhi4_neg1>
  f2:	77 fd       	sbrc	r23, 7
  f4:	08 d0       	rcall	.+16     	; 0x106 <__divmodhi4_neg2>
  f6:	0b d0       	rcall	.+22     	; 0x10e <__udivmodhi4>
  f8:	07 fc       	sbrc	r0, 7
  fa:	05 d0       	rcall	.+10     	; 0x106 <__divmodhi4_neg2>
  fc:	3e f4       	brtc	.+14     	; 0x10c <__divmodhi4_exit>

000000fe <__divmodhi4_neg1>:
  fe:	90 95       	com	r25
 100:	81 95       	neg	r24
 102:	9f 4f       	sbci	r25, 0xFF	; 255
 104:	08 95       	ret

00000106 <__divmodhi4_neg2>:
 106:	70 95       	com	r23
 108:	61 95       	neg	r22
 10a:	7f 4f       	sbci	r23, 0xFF	; 255

0000010c <__divmodhi4_exit>:
 10c:	08 95       	ret

0000010e <__udivmodhi4>:
 10e:	aa 1b       	sub	r26, r26
 110:	bb 1b       	sub	r27, r27
 112:	51 e1       	ldi	r21, 0x11	; 17
 114:	07 c0       	rjmp	.+14     	; 0x124 <__udivmodhi4_ep>

00000116 <__udivmodhi4_loop>:
 116:	aa 1f       	adc	r26, r26
 118:	bb 1f       	adc	r27, r27
 11a:	a6 17       	cp	r26, r22
 11c:	b7 07       	cpc	r27, r23
 11e:	10 f0       	brcs	.+4      	; 0x124 <__udivmodhi4_ep>
 120:	a6 1b       	sub	r26, r22
 122:	b7 0b       	sbc	r27, r23

00000124 <__udivmodhi4_ep>:
 124:	88 1f       	adc	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	5a 95       	dec	r21
 12a:	a9 f7       	brne	.-22     	; 0x116 <__udivmodhi4_loop>
 12c:	80 95       	com	r24
 12e:	90 95       	com	r25
 130:	bc 01       	movw	r22, r24
 132:	cd 01       	movw	r24, r26
 134:	08 95       	ret

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
